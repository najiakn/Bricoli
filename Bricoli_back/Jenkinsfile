pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        IMAGE_NAME = 'tourist-app'
        DOCKER_HUB_REPO = 'najiaknizi/bricoli'
        DOCKER_CREDENTIAL_ID = 'dockerId'
        SONAR_TOKEN = credentials('sonarId')
        SONAR = 'SONAR'
    }

     tools {
            maven 'mvn'
     }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/najiakn/Bricoli.git'
            }
        }

        stage('Build and Test') {
            steps {
                dir('Bricoli_back') {
                    bat 'mvn clean install'
                    bat 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Bricoli_back') {
                    withSonarQubeEnv(SONAR) {
                        bat "mvn sonar:sonar -Dsonar.token=${SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    dir('Bricoli_back') {
                        bat "docker build -t ${IMAGE_NAME} ."
                    }
                }
            }
        }
         stage('Verify Docker Installation') {
                    steps {
                        script {
                            bat 'docker --version'
                        }
                    }
                }

     stage('Tag and Push Docker Images') {
         steps {
             script {
                 def imageTag = "${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}"
                 docker.withRegistry("https://index.docker.io/v1/", DOCKER_CREDENTIAL_ID) {
                     bat """
                         docker tag ${IMAGE_NAME}:latest ${imageTag}
                         docker push ${imageTag}
                     """
                 }
             }
         }
     }






        stage('Run Docker Compose') {
            steps {
                script {
                    dir('Bricoli_back') {
                        bat "docker-compose -f ${DOCKER_COMPOSE_FILE} up -d"
                    }
                }
            }
        }

         stage('Quality Gate Check') {
                    steps {
                        timeout(time: 5, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                        }
                    }
         }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}